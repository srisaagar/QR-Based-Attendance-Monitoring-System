{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saira\\\\qr-attendance\\\\src\\\\components\\\\TeacherDashboard.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { QRCodeCanvas } from 'qrcode.react';\n// import './TeacherDashboard.css';\n\n// const TeacherDashboard = () => {\n//   const [teacher, setTeacher] = useState({});\n//   const [sessionId, setSessionId] = useState(localStorage.getItem('activeSessionId') || null);\n//   const [form, setForm] = useState({ className: '', subject: '', hour: '', date: '' });\n//   const [students, setStudents] = useState([]);\n//   const [historySessions, setHistorySessions] = useState([]);\n//   const [expandedSession, setExpandedSession] = useState(null);\n//   const [manualStudent, setManualStudent] = useState({ name: '', rollNo: '' });\n\n//   const [localIP, setLocalIP] = useState('');\n\n//   const token = localStorage.getItem('teacherToken');\n\n//   useEffect(() => {\n//     const fetchIP = async () => {\n//       try {\n//         const res = await axios.get('http://localhost:5000/api/utils/my-ip');\n//         setLocalIP(res.data.ip);\n//       } catch (err) {\n//         console.error('Failed to fetch IP:', err);\n//       }\n//     };\n\n//     fetchIP();\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchTeacher = async () => {\n//       try {\n//         const res = await axios.get('http://localhost:5000/api/teachers/me', {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setTeacher(res.data);\n//       } catch (err) {\n//         console.error('Failed to fetch teacher:', err);\n//         alert('Please log in again.');\n//       }\n//     };\n//     fetchTeacher();\n//   }, [token]);\n\n//   useEffect(() => {\n//     if (!sessionId) return;\n//     localStorage.setItem('activeSessionId', sessionId);\n//     const interval = setInterval(async () => {\n//       try {\n//         const res = await axios.get(`http://localhost:5000/api/attendance/${sessionId}`);\n//         setStudents(res.data.students || []);\n//       } catch (err) {\n//         console.error('Error fetching students:', err);\n//       }\n//     }, 3000);\n//     return () => clearInterval(interval);\n//   }, [sessionId]);\n\n//   useEffect(() => {\n//     if (!teacher._id) return;\n\n//     const fetchAttendanceHistory = async () => {\n//       try {\n//         const res = await axios.get(`http://localhost:5000/api/attendance/teacher/${teacher._id}`);\n//         setHistorySessions(res.data);\n//       } catch (err) {\n//         console.error('Failed to load history:', err);\n//       }\n//     };\n\n//     fetchAttendanceHistory();\n//   }, [teacher]);\n\n//   const handleCreateSession = async () => {\n//     const { className, subject, hour, date } = form;\n//     if (!className || !subject || !hour || !date) {\n//       alert('All fields are required');\n//       return;\n//     }\n\n//     try {\n//       // Fetch local IP\n//       const ipRes = await axios.get('http://localhost:5000/api/utils/my-ip');\n//       const ip = ipRes.data.ip;\n//       setLocalIP(ip); // âœ… Store it in state\n\n//       // Create session\n//       const res = await axios.post(\n//         'http://localhost:5000/api/attendance/create',\n//         { ...form, teacherId: teacher._id },\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n//       setSessionId(res.data._id);\n//       setForm({ className: '', subject: '', hour: '', date: '' });\n//     } catch (err) {\n//       console.error('Session creation failed:', err);\n//       alert('Failed to start session.');\n//     }\n//   };\n\n//   const handleAddStudent = async () => {\n//     if (!manualStudent.name || !manualStudent.rollNo) return alert('Enter all fields');\n//     try {\n//       await axios.post('http://localhost:5000/api/attendance/student/manual-add', {\n//         sessionId,\n//         name: manualStudent.name,\n//         rollNo: manualStudent.rollNo\n//       });\n\n//       setManualStudent({ name: '', rollNo: '' });\n//     } catch (err) {\n//       console.error('Error adding student:', err);\n//       alert('Failed to add student');\n//     }\n//   };\n\n//   const handleDeleteStudent = async (rollNo) => {\n//     try {\n//       await axios.put(`http://localhost:5000/api/attendance/${sessionId}/remove-student`, { rollNo });\n//       setStudents(students.filter((s) => s.rollNo !== rollNo));\n//     } catch (err) {\n//       console.error('Error removing student:', err);\n//       alert('Failed to remove student');\n//     }\n//   };\n\n//   const handleEndSession = () => {\n//     localStorage.removeItem('activeSessionId');\n//     setSessionId(null);\n//     setStudents([]);\n//   };\n\n//   return (\n//     <div className=\"dashboard-container\">\n//       <h2 className=\"dashboard-title\">Welcome, {teacher.name || 'Teacher'}</h2>\n\n//       <div className=\"dashboard-grid\">\n//         <div className=\"dashboard-card\">\n//           {sessionId && localIP ? (\n//             <>\n//               <h3 className=\"section-title\">QR Code - Live Session</h3>\n//               <QRCodeCanvas value={`http://${localIP}:3000/attendance/${sessionId}`} size={256} />\n//               <button className=\"end-button\" onClick={handleEndSession}>End Attendance</button>\n//             </>\n//           ) : (\n//             <>\n//               <h3 className=\"section-title\">Start New Attendance</h3>\n//               <input type=\"text\" placeholder=\"Class\" value={form.className} onChange={(e) => setForm({ ...form, className: e.target.value })} className=\"form-input\" required />\n//               <input type=\"text\" placeholder=\"Subject\" value={form.subject} onChange={(e) => setForm({ ...form, subject: e.target.value })} className=\"form-input\" required />\n//               <input type=\"text\" placeholder=\"Hour\" value={form.hour} onChange={(e) => setForm({ ...form, hour: e.target.value })} className=\"form-input\" required />\n//               <input type=\"date\" value={form.date} onChange={(e) => setForm({ ...form, date: e.target.value })} className=\"form-input\" required />\n//               <button className=\"submit-button\" onClick={handleCreateSession}>Generate QR</button>\n//             </>\n//           )}\n\n//         </div>\n\n//         <div className=\"dashboard-card\">\n//           <h3 className=\"section-title\">Students Present</h3>\n//           {students.length === 0 ? (\n//             <p className=\"text-muted\">No students scanned yet.</p>\n//           ) : (\n//             <ul className=\"student-list\">\n//               {students.map((s, i) => (\n//                 <li key={i} className=\"student-item\">\n//                   {s.name} ({s.rollNo})\n//                   <button onClick={() => handleDeleteStudent(s.rollNo)} className=\"delete-student\">Delete</button>\n//                 </li>\n//               ))}\n//             </ul>\n//           )}\n\n//           {sessionId && (\n//             <div className=\"mt-4\">\n//               <input type=\"text\" placeholder=\"Name\" value={manualStudent.name} onChange={(e) => setManualStudent({ ...manualStudent, name: e.target.value })} className=\"form-input\" />\n//               <input type=\"text\" placeholder=\"Roll No\" value={manualStudent.rollNo} onChange={(e) => setManualStudent({ ...manualStudent, rollNo: e.target.value })} className=\"form-input\" />\n//               <button onClick={handleAddStudent} className=\"submit-button\">Add Student</button>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       <div className=\"dashboard-card\">\n//         <h3 className=\"section-title large\">ðŸ“… Attendance History</h3>\n//         {historySessions.length === 0 ? (\n//           <p className=\"text-muted\">No previous sessions found.</p>\n//         ) : (\n//           <table className=\"history-table\">\n//             <thead>\n//               <tr>\n//                 <th>Date</th>\n//                 <th>Class</th>\n//                 <th>Subject</th>\n//                 <th>Hour</th>\n//                 <th>Students</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {historySessions.map((session) => (\n//                 <React.Fragment key={session._id}>\n//                   <tr>\n//                     <td>{session.date}</td>\n//                     <td>{session.className}</td>\n//                     <td>{session.subject}</td>\n//                     <td>{session.hour}</td>\n//                     <td\n//                       className=\"students-count\"\n//                       onClick={() =>\n//                         setExpandedSession(\n//                           expandedSession === session._id ? null : session._id\n//                         )\n//                       }\n//                     >\n//                       {session.students.length}\n//                     </td>\n//                   </tr>\n//                   {expandedSession === session._id && (\n//                     <tr>\n//                       <td colSpan=\"5\" className=\"expanded-row\">\n//                         <ul className=\"student-list\">\n//                           {session.students.map((s, i) => (\n//                             <li key={i}>{s.name} ({s.rollNo})</li>\n//                           ))}\n//                         </ul>\n//                       </td>\n//                     </tr>\n//                   )}\n//                 </React.Fragment>\n//               ))}\n//             </tbody>\n//           </table>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TeacherDashboard;\n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { QRCodeCanvas } from 'qrcode.react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TeacherDashboard() {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [teacherName, setTeacherName] = useState('');\n  const [classDetails, setClassDetails] = useState({\n    class: '',\n    subject: '',\n    hour: '',\n    date: ''\n  });\n  const [sessionId, setSessionId] = useState('');\n  const [students, setStudents] = useState([]);\n  const [localIP, setLocalIP] = useState('localhost');\n  const [qrRefreshKey, setQrRefreshKey] = useState(Date.now());\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      navigate('/');\n      return;\n    }\n    axios.get('http://localhost:5000/api/teacher/me', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => setTeacherName(response.data.name)).catch(error => {\n      console.error('Failed to fetch teacher:', error);\n      navigate('/');\n    });\n  }, [navigate]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setClassDetails(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleCreateSession = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.post('http://localhost:5000/api/session', {\n        ...classDetails\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setSessionId(response.data.sessionId);\n    } catch (error) {\n      console.error('Session creation failed:', error);\n    }\n  };\n  const getLocalIP = () => {\n    const RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection;\n    if (!RTCPeerConnection) return;\n    const rtc = new RTCPeerConnection({\n      iceServers: []\n    });\n    rtc.createDataChannel('');\n    rtc.createOffer().then(offer => rtc.setLocalDescription(offer)).catch(console.error);\n    rtc.onicecandidate = event => {\n      if (event && event.candidate && event.candidate.candidate) {\n        const match = event.candidate.candidate.match(/(\\d{1,3}(\\.\\d{1,3}){3})/);\n        if (match) {\n          setLocalIP(match[1]);\n        }\n        rtc.onicecandidate = null;\n      }\n    };\n  };\n  useEffect(() => {\n    getLocalIP();\n  }, []);\n  useEffect(() => {\n    if (!sessionId) return;\n    const interval = setInterval(() => {\n      axios.get(`http://localhost:5000/api/session/${sessionId}/students`).then(response => setStudents(response.data.students)).catch(error => {\n        console.error('Error fetching students:', error);\n      });\n      setQrRefreshKey(Date.now()); // QR refresh every 10s\n    }, 10000);\n    return () => clearInterval(interval);\n  }, [sessionId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-8 max-w-5xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-6 text-center\",\n      children: [\"Welcome, \", teacherName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), !sessionId ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"class\",\n        placeholder: \"Class\",\n        value: classDetails.class,\n        onChange: handleInputChange,\n        className: \"border rounded p-2 w-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"subject\",\n        placeholder: \"Subject\",\n        value: classDetails.subject,\n        onChange: handleInputChange,\n        className: \"border rounded p-2 w-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"hour\",\n        placeholder: \"Hour\",\n        value: classDetails.hour,\n        onChange: handleInputChange,\n        className: \"border rounded p-2 w-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"date\",\n        value: classDetails.date,\n        onChange: handleInputChange,\n        className: \"border rounded p-2 w-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateSession,\n        className: \"bg-blue-500 text-white p-2 rounded col-span-1 md:col-span-2 hover:bg-blue-600\",\n        children: \"Create Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(QRCodeCanvas, {\n          value: `http://${localIP}:3000/attendance/${sessionId}?t=${qrRefreshKey}`,\n          size: 256\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2\",\n          children: \"Students Attended:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"border rounded p-2 h-64 overflow-y-auto\",\n          children: students.map((student, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"border-b py-1\",\n            children: student.name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 5\n  }, this);\n}\n_s(TeacherDashboard, \"EKTMuL/7RDmGomHhKZVGF/W/yZc=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = TeacherDashboard;\nexport default TeacherDashboard;\nvar _c;\n$RefreshReg$(_c, \"TeacherDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","QRCodeCanvas","axios","jsxDEV","_jsxDEV","TeacherDashboard","_s","location","navigate","teacherName","setTeacherName","classDetails","setClassDetails","class","subject","hour","date","sessionId","setSessionId","students","setStudents","localIP","setLocalIP","qrRefreshKey","setQrRefreshKey","Date","now","token","localStorage","getItem","get","headers","Authorization","then","response","data","name","catch","error","console","handleInputChange","e","value","target","prev","handleCreateSession","post","getLocalIP","RTCPeerConnection","window","webkitRTCPeerConnection","rtc","iceServers","createDataChannel","createOffer","offer","setLocalDescription","onicecandidate","event","candidate","match","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","size","map","student","index","_c","$RefreshReg$"],"sources":["C:/Users/saira/qr-attendance/src/components/TeacherDashboard.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { QRCodeCanvas } from 'qrcode.react';\r\n// import './TeacherDashboard.css';\r\n\r\n// const TeacherDashboard = () => {\r\n//   const [teacher, setTeacher] = useState({});\r\n//   const [sessionId, setSessionId] = useState(localStorage.getItem('activeSessionId') || null);\r\n//   const [form, setForm] = useState({ className: '', subject: '', hour: '', date: '' });\r\n//   const [students, setStudents] = useState([]);\r\n//   const [historySessions, setHistorySessions] = useState([]);\r\n//   const [expandedSession, setExpandedSession] = useState(null);\r\n//   const [manualStudent, setManualStudent] = useState({ name: '', rollNo: '' });\r\n\r\n//   const [localIP, setLocalIP] = useState('');\r\n\r\n\r\n//   const token = localStorage.getItem('teacherToken');\r\n\r\n//   useEffect(() => {\r\n//     const fetchIP = async () => {\r\n//       try {\r\n//         const res = await axios.get('http://localhost:5000/api/utils/my-ip');\r\n//         setLocalIP(res.data.ip);\r\n//       } catch (err) {\r\n//         console.error('Failed to fetch IP:', err);\r\n//       }\r\n//     };\r\n\r\n//     fetchIP();\r\n//   }, []);\r\n\r\n\r\n//   useEffect(() => {\r\n//     const fetchTeacher = async () => {\r\n//       try {\r\n//         const res = await axios.get('http://localhost:5000/api/teachers/me', {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         });\r\n//         setTeacher(res.data);\r\n//       } catch (err) {\r\n//         console.error('Failed to fetch teacher:', err);\r\n//         alert('Please log in again.');\r\n//       }\r\n//     };\r\n//     fetchTeacher();\r\n//   }, [token]);\r\n\r\n//   useEffect(() => {\r\n//     if (!sessionId) return;\r\n//     localStorage.setItem('activeSessionId', sessionId);\r\n//     const interval = setInterval(async () => {\r\n//       try {\r\n//         const res = await axios.get(`http://localhost:5000/api/attendance/${sessionId}`);\r\n//         setStudents(res.data.students || []);\r\n//       } catch (err) {\r\n//         console.error('Error fetching students:', err);\r\n//       }\r\n//     }, 3000);\r\n//     return () => clearInterval(interval);\r\n//   }, [sessionId]);\r\n\r\n//   useEffect(() => {\r\n//     if (!teacher._id) return;\r\n\r\n//     const fetchAttendanceHistory = async () => {\r\n//       try {\r\n//         const res = await axios.get(`http://localhost:5000/api/attendance/teacher/${teacher._id}`);\r\n//         setHistorySessions(res.data);\r\n//       } catch (err) {\r\n//         console.error('Failed to load history:', err);\r\n//       }\r\n//     };\r\n\r\n//     fetchAttendanceHistory();\r\n//   }, [teacher]);\r\n\r\n//   const handleCreateSession = async () => {\r\n//     const { className, subject, hour, date } = form;\r\n//     if (!className || !subject || !hour || !date) {\r\n//       alert('All fields are required');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       // Fetch local IP\r\n//       const ipRes = await axios.get('http://localhost:5000/api/utils/my-ip');\r\n//       const ip = ipRes.data.ip;\r\n//       setLocalIP(ip); // âœ… Store it in state\r\n\r\n//       // Create session\r\n//       const res = await axios.post(\r\n//         'http://localhost:5000/api/attendance/create',\r\n//         { ...form, teacherId: teacher._id },\r\n//         { headers: { Authorization: `Bearer ${token}` } }\r\n//       );\r\n//       setSessionId(res.data._id);\r\n//       setForm({ className: '', subject: '', hour: '', date: '' });\r\n//     } catch (err) {\r\n//       console.error('Session creation failed:', err);\r\n//       alert('Failed to start session.');\r\n//     }\r\n//   };\r\n\r\n\r\n//   const handleAddStudent = async () => {\r\n//     if (!manualStudent.name || !manualStudent.rollNo) return alert('Enter all fields');\r\n//     try {\r\n//       await axios.post('http://localhost:5000/api/attendance/student/manual-add', {\r\n//         sessionId,\r\n//         name: manualStudent.name,\r\n//         rollNo: manualStudent.rollNo\r\n//       });\r\n\r\n//       setManualStudent({ name: '', rollNo: '' });\r\n//     } catch (err) {\r\n//       console.error('Error adding student:', err);\r\n//       alert('Failed to add student');\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteStudent = async (rollNo) => {\r\n//     try {\r\n//       await axios.put(`http://localhost:5000/api/attendance/${sessionId}/remove-student`, { rollNo });\r\n//       setStudents(students.filter((s) => s.rollNo !== rollNo));\r\n//     } catch (err) {\r\n//       console.error('Error removing student:', err);\r\n//       alert('Failed to remove student');\r\n//     }\r\n//   };\r\n\r\n//   const handleEndSession = () => {\r\n//     localStorage.removeItem('activeSessionId');\r\n//     setSessionId(null);\r\n//     setStudents([]);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"dashboard-container\">\r\n//       <h2 className=\"dashboard-title\">Welcome, {teacher.name || 'Teacher'}</h2>\r\n\r\n//       <div className=\"dashboard-grid\">\r\n//         <div className=\"dashboard-card\">\r\n//           {sessionId && localIP ? (\r\n//             <>\r\n//               <h3 className=\"section-title\">QR Code - Live Session</h3>\r\n//               <QRCodeCanvas value={`http://${localIP}:3000/attendance/${sessionId}`} size={256} />\r\n//               <button className=\"end-button\" onClick={handleEndSession}>End Attendance</button>\r\n//             </>\r\n//           ) : (\r\n//             <>\r\n//               <h3 className=\"section-title\">Start New Attendance</h3>\r\n//               <input type=\"text\" placeholder=\"Class\" value={form.className} onChange={(e) => setForm({ ...form, className: e.target.value })} className=\"form-input\" required />\r\n//               <input type=\"text\" placeholder=\"Subject\" value={form.subject} onChange={(e) => setForm({ ...form, subject: e.target.value })} className=\"form-input\" required />\r\n//               <input type=\"text\" placeholder=\"Hour\" value={form.hour} onChange={(e) => setForm({ ...form, hour: e.target.value })} className=\"form-input\" required />\r\n//               <input type=\"date\" value={form.date} onChange={(e) => setForm({ ...form, date: e.target.value })} className=\"form-input\" required />\r\n//               <button className=\"submit-button\" onClick={handleCreateSession}>Generate QR</button>\r\n//             </>\r\n//           )}\r\n\r\n//         </div>\r\n\r\n//         <div className=\"dashboard-card\">\r\n//           <h3 className=\"section-title\">Students Present</h3>\r\n//           {students.length === 0 ? (\r\n//             <p className=\"text-muted\">No students scanned yet.</p>\r\n//           ) : (\r\n//             <ul className=\"student-list\">\r\n//               {students.map((s, i) => (\r\n//                 <li key={i} className=\"student-item\">\r\n//                   {s.name} ({s.rollNo})\r\n//                   <button onClick={() => handleDeleteStudent(s.rollNo)} className=\"delete-student\">Delete</button>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           )}\r\n\r\n//           {sessionId && (\r\n//             <div className=\"mt-4\">\r\n//               <input type=\"text\" placeholder=\"Name\" value={manualStudent.name} onChange={(e) => setManualStudent({ ...manualStudent, name: e.target.value })} className=\"form-input\" />\r\n//               <input type=\"text\" placeholder=\"Roll No\" value={manualStudent.rollNo} onChange={(e) => setManualStudent({ ...manualStudent, rollNo: e.target.value })} className=\"form-input\" />\r\n//               <button onClick={handleAddStudent} className=\"submit-button\">Add Student</button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       <div className=\"dashboard-card\">\r\n//         <h3 className=\"section-title large\">ðŸ“… Attendance History</h3>\r\n//         {historySessions.length === 0 ? (\r\n//           <p className=\"text-muted\">No previous sessions found.</p>\r\n//         ) : (\r\n//           <table className=\"history-table\">\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Date</th>\r\n//                 <th>Class</th>\r\n//                 <th>Subject</th>\r\n//                 <th>Hour</th>\r\n//                 <th>Students</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {historySessions.map((session) => (\r\n//                 <React.Fragment key={session._id}>\r\n//                   <tr>\r\n//                     <td>{session.date}</td>\r\n//                     <td>{session.className}</td>\r\n//                     <td>{session.subject}</td>\r\n//                     <td>{session.hour}</td>\r\n//                     <td\r\n//                       className=\"students-count\"\r\n//                       onClick={() =>\r\n//                         setExpandedSession(\r\n//                           expandedSession === session._id ? null : session._id\r\n//                         )\r\n//                       }\r\n//                     >\r\n//                       {session.students.length}\r\n//                     </td>\r\n//                   </tr>\r\n//                   {expandedSession === session._id && (\r\n//                     <tr>\r\n//                       <td colSpan=\"5\" className=\"expanded-row\">\r\n//                         <ul className=\"student-list\">\r\n//                           {session.students.map((s, i) => (\r\n//                             <li key={i}>{s.name} ({s.rollNo})</li>\r\n//                           ))}\r\n//                         </ul>\r\n//                       </td>\r\n//                     </tr>\r\n//                   )}\r\n//                 </React.Fragment>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TeacherDashboard;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { QRCodeCanvas } from 'qrcode.react';\r\nimport axios from 'axios';\r\n\r\nfunction TeacherDashboard() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [teacherName, setTeacherName] = useState('');\r\n  const [classDetails, setClassDetails] = useState({ class: '', subject: '', hour: '', date: '' });\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [students, setStudents] = useState([]);\r\n  const [localIP, setLocalIP] = useState('localhost');\r\n  const [qrRefreshKey, setQrRefreshKey] = useState(Date.now());\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    axios.get('http://localhost:5000/api/teacher/me', {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    })\r\n    .then(response => setTeacherName(response.data.name))\r\n    .catch(error => {\r\n      console.error('Failed to fetch teacher:', error);\r\n      navigate('/');\r\n    });\r\n  }, [navigate]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setClassDetails(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleCreateSession = async () => {\r\n    const token = localStorage.getItem('token');\r\n    try {\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/session',\r\n        { ...classDetails },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setSessionId(response.data.sessionId);\r\n    } catch (error) {\r\n      console.error('Session creation failed:', error);\r\n    }\r\n  };\r\n\r\n  const getLocalIP = () => {\r\n    const RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection;\r\n    if (!RTCPeerConnection) return;\r\n\r\n    const rtc = new RTCPeerConnection({ iceServers: [] });\r\n    rtc.createDataChannel('');\r\n    rtc.createOffer().then(offer => rtc.setLocalDescription(offer)).catch(console.error);\r\n\r\n    rtc.onicecandidate = (event) => {\r\n      if (event && event.candidate && event.candidate.candidate) {\r\n        const match = event.candidate.candidate.match(/(\\d{1,3}(\\.\\d{1,3}){3})/);\r\n        if (match) {\r\n          setLocalIP(match[1]);\r\n        }\r\n        rtc.onicecandidate = null;\r\n      }\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLocalIP();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!sessionId) return;\r\n\r\n    const interval = setInterval(() => {\r\n      axios.get(`http://localhost:5000/api/session/${sessionId}/students`)\r\n        .then(response => setStudents(response.data.students))\r\n        .catch(error => {\r\n          console.error('Error fetching students:', error);\r\n        });\r\n\r\n      setQrRefreshKey(Date.now()); // QR refresh every 10s\r\n    }, 10000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [sessionId]);\r\n\r\n  return (\r\n    <div className=\"p-8 max-w-5xl mx-auto\">\r\n      <h1 className=\"text-3xl font-bold mb-6 text-center\">Welcome, {teacherName}</h1>\r\n      \r\n      {!sessionId ? (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <input type=\"text\" name=\"class\" placeholder=\"Class\" value={classDetails.class} onChange={handleInputChange} className=\"border rounded p-2 w-full\" />\r\n          <input type=\"text\" name=\"subject\" placeholder=\"Subject\" value={classDetails.subject} onChange={handleInputChange} className=\"border rounded p-2 w-full\" />\r\n          <input type=\"text\" name=\"hour\" placeholder=\"Hour\" value={classDetails.hour} onChange={handleInputChange} className=\"border rounded p-2 w-full\" />\r\n          <input type=\"date\" name=\"date\" value={classDetails.date} onChange={handleInputChange} className=\"border rounded p-2 w-full\" />\r\n          <button onClick={handleCreateSession} className=\"bg-blue-500 text-white p-2 rounded col-span-1 md:col-span-2 hover:bg-blue-600\">Create Session</button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6\">\r\n          <div className=\"flex justify-center\">\r\n            <QRCodeCanvas value={`http://${localIP}:3000/attendance/${sessionId}?t=${qrRefreshKey}`} size={256} />\r\n          </div>\r\n          <div>\r\n            <h2 className=\"text-xl font-semibold mb-2\">Students Attended:</h2>\r\n            <ul className=\"border rounded p-2 h-64 overflow-y-auto\">\r\n              {students.map((student, index) => (\r\n                <li key={index} className=\"border-b py-1\">{student.name}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TeacherDashboard;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}